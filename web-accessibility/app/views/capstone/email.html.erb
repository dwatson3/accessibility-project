<%= javascript_include_tag "application" %>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

  <div id="wrapper">

        <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
          
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <span class="navbar-brand"> Web Accessibility </span>
            </div>
        </nav>
    </div>    

<div id="content-wrapper">

  <div id="sidebar-wrapper" class="col-md-offset-2">

  <div class="collapse navbar-collapse navbar-ex1-collapse fixed">

    <ul class="nav navbar-nav side-nav border down">

    <li>
      <%= link_to "Home", capstone_path %>
    </li>
      
      <li>
        <%= link_to "Twilio Demo", capstone_twilio_path %>
      </li>

      <li>
        <%= link_to "Speech-to-Text Email", capstone_email_path %>
      </li>

      <li>
        <%= link_to "Google Translate", capstone_translate_path %>
      </li>

      <li>
        <%= link_to "ARIA & CSS", capstone_css_path %>
      </li>
  
    </ul>
  </div>

<div class="col-md-9">

<%= link_to "Translation Demo", capstone_translate_path %>

<div class="email-content col-offset-9">

<h1> 
  <i class="fa fa-bookmark index-bookmark" aria-hidden="true"> </i> 
  Web Speech API Demonstration</h1>
<hr>

<!-- <div class="col-md-1"> -->
  <div id="status">
  </div>
  <p>
  <div id="results">
    <span id="final_span" style="color:black"></span>
    <span id="interim_span" style="color:gray"></span>
  </div>
<!-- </div> -->

<!-- <button onclick="microphoneButton()" style="border: 0; background-color:transparent"> -->
<!-- <div class="col-md-1"> -->
  <button class="email-mic-button">
   <!--  <img id="status_img" src="mic.gif" alt="Start"> -->
   <%= image_tag("mic.gif") %>
  </button>

  <button onclick="emailButton()" class="create-email-button">
    Create Email
  </button>
<!-- </div> -->

<div id="div_language">
  <select id="select_language" onchange="updateCountry()"></select>
  <select id="select_dialect"></select>
</div>

<p>
  This demonstration is a Google Web Speech API that translate's your speech audio into written text with your computer's microphone. 

  When speaking out loud, make the first line the content of your Email Subject Line. Say "new line," and it will automatically go the next line.

  When you are finished composing your email, say "write email," and it will automatically press the "create email" button, opening another window with the option to choose your email preference.
</p>

<span class="email-to-twilio-tag"> 
  <p class="p-twilio-left">

    <i class="fa fa-long-arrow-left" aria-hidden="true"></i>

    Go to <%= link_to "Twilio Demo",
    capstone_twilio_path, {:class => "index-project-link"} %>
  <!-- </p> -->

  <!-- <p class="p-translate-right right"> -->
  <span class="right">
  Go to <%= link_to "Translate Demo",
  capstone_translate_path, {:class => "index-project-link"} %>
    
    <i class="fa fa-long-arrow-right" aria-hidden="true"> </i>
  <!-- </p> -->
</span>

</p>

<span class="email">
  
</span>

</div>
</div>

  <i class="fa fa-long-arrow-left" aria-hidden="true"></i>

<!-- <script src="webspeech.js"></script> -->
<script>
var reco = new WebSpeechRecognition(window);
reco.statusText('status');
reco.statusImage('status_img');
reco.finalResults('final_span');
reco.interimResults('interim_span');
reco.continuous = true;

// Handler when user clicks microphone button.
function microphoneButton() {
  reco.lang = select_dialect.value;
  reco.toggleStartStop();
}

microphoneButton();

var create_email_on_end = false;

// Handler when speech recognition completes.
// reco.onEnd = function() {
//   if (create_email_on_end) {
//     create_email_on_end = false;
//     //createEmail(reco.final_transcript);
//   }
// };

// // Handler when user clicks "Create Email" button.
// function emailButton() {
//   if (reco.inProgress()) {
//     // Wait for recognition to end before calling createEmail().
//     create_email_on_end = true;
//     reco.stop();
//   } else {
//     // Recognition has already ended, call createEmail() now.
//     createEmail(reco.final_transcript);
//   }
//   reco.onState('complete');
// }

// // Create email by splitting string s into subject and body.
// function createEmail(s) {
//   // Determine a good place to split it: end of first line, else at a space.
//   var n = s.indexOf('\n');
//   if (n < 0 || n >= 80) {
//     n = 40 + s.substring(40).indexOf(' ');
//   }
//   var subject = encodeURI(s.substring(0, n));
//   var body = encodeURI(s.substring(n + 1));
//   // Open default email provider.
//   window.location.href = 'mailto:?subject=' + subject + '&body=' + body;
// }

var langs =
[['Afrikaans',       ['af-ZA']],
 ['Bahasa Indonesia',['id-ID']],
 ['Bahasa Melayu',   ['ms-MY']],
 ['Català',          ['ca-ES']],
 ['Čeština',         ['cs-CZ']],
 ['Deutsch',         ['de-DE']],
 ['English',         ['en-AU', 'Australia'],
                     ['en-CA', 'Canada'],
                     ['en-IN', 'India'],
                     ['en-NZ', 'New Zealand'],
                     ['en-ZA', 'South Africa'],
                     ['en-GB', 'United Kingdom'],
                     ['en-US', 'United States']],
 ['Español',         ['es-AR', 'Argentina'],
                     ['es-BO', 'Bolivia'],
                     ['es-CL', 'Chile'],
                     ['es-CO', 'Colombia'],
                     ['es-CR', 'Costa Rica'],
                     ['es-EC', 'Ecuador'],
                     ['es-SV', 'El Salvador'],
                     ['es-ES', 'España'],
                     ['es-US', 'Estados Unidos'],
                     ['es-GT', 'Guatemala'],
                     ['es-HN', 'Honduras'],
                     ['es-MX', 'México'],
                     ['es-NI', 'Nicaragua'],
                     ['es-PA', 'Panamá'],
                     ['es-PY', 'Paraguay'],
                     ['es-PE', 'Perú'],
                     ['es-PR', 'Puerto Rico'],
                     ['es-DO', 'República Dominicana'],
                     ['es-UY', 'Uruguay'],
                     ['es-VE', 'Venezuela']],
 ['Euskara',         ['eu-ES']],
 ['Français',        ['fr-FR']],
 ['Galego',          ['gl-ES']],
 ['IsiZulu',         ['zu-ZA']],
 ['Íslenska',        ['is-IS']],
 ['Italiano',        ['it-IT', 'Italia'],
                     ['it-CH', 'Svizzera']],
 ['Magyar',          ['hu-HU']],
 ['Nederlands',      ['nl-NL']],
 ['Norsk bokmål',    ['nb-NO']],
 ['Polski',          ['pl-PL']],
 ['Português',       ['pt-BR', 'Brasil'],
                     ['pt-PT', 'Portugal']],
 ['Română',          ['ro-RO']],
 ['Slovenčina',      ['sk-SK']],
 ['Suomi',           ['fi-FI']],
 ['Svenska',         ['sv-SE']],
 ['Türkçe',          ['tr-TR']],
 ['български',       ['bg-BG']],
 ['Pусский',         ['ru-RU']],
 ['Српски',          ['sr-RS']],
 ['한국어',            ['ko-KR']],
 ['中文',             ['cmn-Hans-CN', '普通话 (中国大陆)'],
                     ['cmn-Hans-HK', '普通话 (香港)'],
                     ['cmn-Hant-TW', '中文 (台灣)'],
                     ['yue-Hant-HK', '粵語 (香港)']],
 ['日本語',           ['ja-JP']],
 ['Lingua latīna',   ['la']]];

function updateCountry() {
  for (var i = select_dialect.options.length - 1; i >= 0; i--) {
    select_dialect.remove(i);
  }
  var list = langs[select_language.selectedIndex];
  for (var i = 1; i < list.length; i++) {
    select_dialect.options.add(new Option(list[i][1], list[i][0]));
  }
  select_dialect.style.visibility = list[1].length == 1 ? 'hidden' : 'visible';
}

for (var i = 0; i < langs.length; i++) {
  select_language.options[i] = new Option(langs[i][0], i);
}
select_language.selectedIndex = 6;
updateCountry();
select_dialect.selectedIndex = 6;
</script>

<div class="e-further-reading col-md-8">

<span class="email-further-reading">
  Further Reading
</span> <br>

<span class="email-report">Tutorial: How to Use a Speech To Text API for Email Messaging. 
<br>
How Speech Recognition Software works.</span>

<p class="aria-move-p"> <strong> What is speech recognition software? </strong> </p>

<p class="aria-move-p">Speech recognition software allows users the ability to process spoken word into text on the screen. It replaces the need to type words with the keyboard.</p>

<p class="aria-move-p">Popular speech recognition technologies (for both users with and without disabilities) include foreign language learning, voice activated products for the blind, and writing software to help improve writing skills for users with physical impairments. </p>

<p class="aria-move-p">Speech Recognition software helps people improve their access to the computer, and can help users with various disabilities that normally prevent access, including: limited motor skills, repetitive strain injuries (including carpal tunnel syndrome), limited in the English language, vision impairments, physical disabilities, and learning disabilities such as dyslexia and dysgraphia.</p>

<p class="aria-move-p">Some benefits of this software include skill improvement in writing abilities, writing production, and core reading. In order to fully utilize the best performance from speech recognition, it requires a quiet environment so that a computer microphone can clearly understand your voice.</p>

<p class="aria-move-p">This tutorial shows you how to code a simple speech-to-text application to write and send emails, with the use of a google speech-to-text API.</p> 

<span><strong> Directions: </strong></span>

<p class="aria-move-p">Starting out, Google provides a helpful tutorial on how to use their speech-to-text API. I will walk you through how this code works. You need to download the codelab files from the tutorial to see the various speech-to-text demos.</p>

<p class="aria-move-p">Once you have your basic code in place with HTML and JavaScript, you can style your speech-to-text API in whichever layout you choose - whether it be Bootstrap, CSS, or Sass. In this case, I am using Sass and Bootstrap. The code comes with a reset.css file, as well as some styling incorporated into the HTML file.</p>

<p class="aria-move-p">In this demo I used the provided code from codelab3solution.html asinto my index.html. I created three separate files using HTML, CSS, and JavaScript, as well as including images and the webspeech.js file.</p>  

<span> <strong> Step 1: Adding in the script file.</strong> </span> 

<p class="aria-move-p">Our “webspeech.js” library implements a WebSpeechRecognition object, includes multiple helper functions within that object. This file is also included in the tutorial zip we previously downloaded.</p>

<p class="aria-move-p">The WebSpeechRecognition object directs output to our “input_field”.</p>

<p class="aria-move-p">You’ll notice this code below - the div id for “div_language” in the “codelab3.html” file. The codelab3.html calls in the webspeech.js file.</p>

<span> <strong> Step 2: Add the microphone button to apply the start/stop recognition.</strong> </span>

<p class="aria-move-p">From here you’ll see the code for the microphone button in the HTML file, which calls microphoneButton() when clicked. h calls in the JavaScript onclick function called microphoneButton().</p>

<p class="aria-move-p">The onclick button responds to the JavaScript function for microphoneButton(). The function retrieves the BCP47 value from the selection, and passes it to the recognition object. When the user has the option of selecting a language, the script file is populating the select option with the various language options. The languages are included with their BCP47 tags, also known as a IETF language tag. This is an abbreviated language code, for example “en” for English or “pt-BR” for Brazilian Portuguese. Then it calls the toggleStartStop() as before.</p>

<p><strong> Step 3: Add Status Text for the user.</strong></p>

<p class="aria-move-p">The div element displays status information, and is placed above the div with an id of “status.”</p>

<p class="aria-move-p">This corresponds to reco variable var reco, and reco.statusText.</p>

<p class="aria-move-p">The microphone button in your HTML performs a search after a successful speech recognition session. The callback function for the onEnd event checks to see if any results were returned, and if they were returned, the form is submitted.</p>

<p class="aria-move-p">When the user has the option of selecting a language, the script file is populating the select option with the various language options. The languages are included with their BCP47 tags, also known as a IETF language tag. This is an abbreviated language code, for example “en” for English or “pt-BR” for Brazilian Portuguese.</p>

<p class="aria-move-p">The code at the bottom of your file before the script tag contains all of the languages placed within var langs.</p>

<p><strong> Conclusion </strong></p>

<p class="aria-move-p">Now that you have a basic understanding of what’s going on under the hood of this application, open your web app in the terminal with the command python -m SimpleHTTPServer. This will allow you to access your page when you type in localhost:8000.</p> 

<p class="aria-move-p">
  After you type in localhost:8000 into your web browser, your index.html page will open showing the web speech api. The security feature on your browser will ask to either block or allow usage of your computer's microphone. You will want to click "Allow."
  Make sure you're in a fairly quiet environment when you speak into your computer's microphone.  
</p>

<p class="aria-move-p">When you have inputted your audio with the microphone button, you can then press the email button and click on the email option of your choice to send. This is a simple demo on how to encourage developers to make web content is accessible for a diversity of users.</p>

</div>
</div>
