<%= javascript_include_tag "application" %>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">

  <div id="wrapper">

        <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
          
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    
                    <span class="icon-bar"></span>
                    
                    <span class="icon-bar">
                    </span>
                </button>
                <span class="navbar-brand">
                 Web Accessibility 
                 </span>
            </div>
				</nav>
		</div>		

<div id="content-wrapper" class="twilio-sidebar-down">

	<div id="sidebar-wrapper" class="col-md-offset-2">

		<div class="collapse navbar-collapse navbar-ex1-collapse fixed">
		
		<ul class="nav navbar-nav side-nav border down relative">
			
			<li>
				<%= link_to "Home", capstone_path %>
			</li>

			<li>
				<%= link_to "Twilio Demo", capstone_twilio_path %>
			</li>

			<li>
				<%= link_to "Speech-to-Text Email", capstone_email_path %>
			</li>

			<li>
				<%= link_to "Google Translate", capstone_translate_path %>
			</li>

			<li>
				<%= link_to "ARIA & CSS", capstone_css_path %>
			</li>
	
		</ul>
	</div> <!-- closes sidebar-wrapper -->

<div id="twilio-content" class="col-md-6">

	<h1 class="twilio-title">
		<i class="fa fa-bookmark index-bookmark" aria-hidden="true"> </i>
	Web Speech Twilio Demonstration</h1>
	<hr>
	<div id="status"></div>
		<p></p>

	<form action="http://localhost:3000/capstone/twilio" method="get">
  	<input name="q" id="input_field" size="70">
	</form>
	
	<button onclick="reco.toggleStartStop()" style="border: 0; background-color:transparent; text-align:center">
		<%= image_tag "mic.gif", :class => "twilio-mic" %>
	</button>


<p class="twilio-move-p col-md-8" style="margin-top:40px;">
		This application demonstrates how to use Google Web Speech API with Twilio API. It uses Google Speech Recognition Software to send as output to a mobile phone with the Twilio API. 
	</p>

	<p class="twilio-move-p col-md-8">
		This project was inspired by my appreciation for cross-platform technology. This application is being used from my laptop, however this API can be used with a browser on a laptop or mobile phone.
	</p>

	<br>

	<div class="twilio-to-index-tag col-md-8">

		<p class="p-twilio-left left">
			<i class="fa fa-long-arrow-left" aria-hidden="true"> </i>
				Go to <%= link_to "Home", capstone_path, {:class => "return-index-link"} %>
		</p>

		<p class="p-email-right right">
			  Go to <%= link_to "Email Demo", capstone_email_path, {:class => "twilio-to-email-link"} %> 
			  
			  <i class="fa fa-long-arrow-right" aria-hidden="true"></i>
		</p>

	</div>	

<div class="twilio-further-reading col-md-8">
	
	<span class="twilio-further-reading"> 
		Further Reading:
	</span> <br>

	<span class="twilio-report"> Tutorial: </span> <br>
	
	<span class="twilio-report"> Incorporating Google Web Speech Api with Twilio Communications API </span> <br>
	
	<p class="twilio-move-p">
		This tutorial explains how to use Google Web Speech API along with Twilio API. This application uses Google Speech Recognition Software to send as output to a mobile phone device with the Twilio API. 
	</p>

	<p class="twilio-move-p">
		This project was inspired by the use of technology being cross-platform. For example, this demonstration is being used from my laptop, but it can be used in a browser on a mobile phone.
	</p>

	<p class="twilio-move-p">
		Or perhaps used by a user that doesn't have a smart phone, or doesn't have a smart phone with SIRI capability. Either way, users who don't have a phone or phone capabilities can use this demo. 
	</p>

	<p class="twilio-move-p">
		This demo is made possible with Ruby on Rails, I incorporated the Google Web Speech API into my twilio.html.erb file.
	</p>

	<span><strong> Directions: </strong></span>

	<p class="twilio-move-p">
		Starting out, Google provides a helpful tutorial on how to use their speech-to-text API. I will walk you through how the code is working. You need to download the codelab files from the tutorial to see the various speech-to-text demos.
	</p>

	<p class="twilio-move-p">
		Once you have your basic code in place with HTML and JavaScript, you can style your speech-to-text API in whichever layout you choose - whether it be Bootstrap, CSS, Less, or Sass. In my application, I am using Sass and Bootstrap. The code provided also comes with a reset.css file, as well as some styling incorporated into the HTML file.
	</p>

	<p class="twilio-move-p">
		In this demo I used the provided code from codelab1solution.html into my index.html.erb file. I created three separate files using HTML, CSS, and JavaScript, as well as including images and the webspeech.js file.
	</p>

	<p class="twilio-move-p">
		Looking at the HTML code provided in the codelab1solution.html file, let's check out how this code is working:
	</p>

	<span> < form action="http://localhost:3000/capstone/twilio" method="get" >
  	< input name="q" id="input_field" size="100" >
< /form > </span>

	<p class="twilio-move-p">
		The form get method is retrieving the input named "q" from the input field. Input q is standing as our user's input. Below the previous code, you'll find the code button with the JavaScript function reco.toggleStartStop(). Styling on this button is applied with border, and transparent as the background color. The image tag "mic.gif" is acting as the button.
	</p>

	<span>
			< form action="http://google.com/search" method="get" >
  	< input name="q" id="input_field" size="100">
	</form >

< button onclick="reco.toggleStartStop()" style="border: 0; background-color:transparent" >
  	< img id="status_img" src="mic.gif" alt="Start" >
  < /button>
	</span>

	<p class="twilio-move-p"> This script tag is calling in the webspeech.js file. </p>

	<span> 
	< script src="webspeech.js">< /script> 
	</span>

	<p class="twilio-move-p">
		At the end of the html file, apply the script tag. This script file is calling the var reco, with the JavaScript function WebSpeechRecognition().
	</p>

	<p class="twilio-move-p">
		In the webspeech.js file, we see that this Javascript function is creating and returning the new WebSpeechRecognition object. 
	</p>

	<p class="twilio-move-p">
		reco.onEnd is holding a function with a boolean statement, saying if the reco.final_transcript is not equal to an empty value, submit the user's input to the form. 
	</p>

	<span>
		<script>
			var reco = new WebSpeechRecognition();
			reco.statusText('status');
			reco.statusImage('status_img');
			reco.finalResults('input_field');

			reco.onEnd = function() {
  			if (reco.final_transcript != '') {
    			input_field.form.submit();
  			}
			};
		</script>		
	</span>

	<p class="twilio-move-p">
		In my controller file in Rails, I created a file called demo_controller.rb.
	</p>

	<p class="twilio-move-p">
		When setting up my index controller, I placed my twilio API inside my index controller. 
		I set an if boolean statement, stating if the params[:q] is called from my user input's form. 
	</p>

	<p class="twilio-move-p">
		You can sign up for a free Twilio trial, and with your free account get a free phone number to send your input data to.
	</p>

	<p class="twilio-move-p">
		Since I am using Ruby on Rails, I followed the Ruby documentation on how to apply the following code to get the API working. 
	</p>

	<p class="twilio-move-p">
	<code>
		if params[:q] <br>
	</code>
	</p>

	<p>
	<code>
		require 'rubygems' # not necessary with ruby 1.9 but included for completeness <br>
		require 'twilio-ruby' <br>
	</code>
	</p>

	<p>
	<code>
		# put your credentials here <br>
		account_sid = ENV["ACCOUNT_SID"] <br>
		auth_token = ENV["AUTH_TOKEN"] <br>
	</code>
	</p>

	<p>
	<code>
		# set up a client to talk to the Twilio REST API <br>
		@client = Twilio::REST::Client.new <br>account_sid, auth_token <br>
	</code>
	</p>

	<p>
	<code>
		message = @client.account.messages.create(:body => params[:q], <br>
			:to => "+15303015894", <br>
			:from => "+15307630890") <br>
	</code>
	</p>

	<p>
	<code>
		puts message.sid <br>
	</code>
	</p>

	<p>
	<code>
		@textinformation = params[:q] <br>
	</code>
	</p>

	<p>
	<code>
		render :twilio <br>
		end <br>
	</code>	
	</p>

	<p class="aria-move-p">
		 If input is being passed into params[:q]
	</p>

	<p>
		requiring the 'rubygems', <br>
 		requiring 'twilio-ruby', <br>
		credentials are added in with your account information.
	</p>

	<p>
		account_sid = #account_sid info goes here <br>
		auth_token = #auth_token info goes here <br>
	</p>

	<p>
		Client is setup to talk to the Twilio REST API.<br>
		@client = Twilio::REST::Client.new <br>
		account_sid, auth_token <br>
	</p>

	<p>
		The message variable is calling the create message with this account:
	</p>

	<p>
		 message = @client.account.messages.create(:body => params[:q], <br>
		:to => "+18005551234", #phone number example <br>
		:from => "+18005436789") #phone number example <br>
	</p>

	<p class="twilio-move-p">
		The message is then sent out with message.sid, with the message authorized with the account_sid number information.
	</p>

	<p class="twilio-move-p">
		This is how I combined both APIs, this application translate the speech audio spoken into your computer's microphone directly as a text message to the number listed. 
	</p>

</div>






</div> <!-- closes the twilio content -->
</div><!-- closes the content wrapper -->

<!-- @text-information was here as a test to see if data was being grabbed -->

<!-- <script src="webspeech.js"></script> -->
<script>
var reco = new WebSpeechRecognition();
reco.statusText('status');
reco.statusImage('status_img');
reco.finalResults('input_field');

reco.onEnd = function() {
  if (reco.final_transcript != '') {
    input_field.form.submit();
  }
};
</script>

